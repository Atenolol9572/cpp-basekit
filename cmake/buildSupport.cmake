function(detect_toolchain_suffix OUT_VAR)
    # 1) OS名称--Linux细化为发行版首词; CYGWIN/MSYS映射到 Windows
    set(_os "${CMAKE_SYSTEM_NAME}")
    if (_os STREQUAL "Darwin")
        set(_os "macOS")
    elseif (_os STREQUAL "CYGWIN" OR _os STREQUAL "MSYS")
        set(_os "Windows")
    elseif (_os STREQUAL "Linux")
        set(_os_rel_path "")
        if (EXISTS "/etc/os-release")
            set(_os_rel_path "/etc/os-release")
        elseif (EXISTS "/usr/lib/os-release")
            set(_os_rel_path "/usr/lib/os-release")
        endif ()
        if (_os_rel_path)
            file(READ "${_os_rel_path}" _os_rel)
            string(REGEX MATCH "PRETTY_NAME=\"([^\r\n\"]+)\"" _m "${_os_rel}")
            if (CMAKE_MATCH_COUNT GREATER 0)
                set(_pretty "${CMAKE_MATCH_1}")
                string(REGEX MATCH "^[^ ]+" _first "${_pretty}")
                if (_first)
                    set(_os "${_first}")
                endif ()
            endif ()
            if (_os STREQUAL "Linux")
                string(REGEX MATCH "ID=([A-Za-z0-9._-]+)" _m2 "${_os_rel}")
                if (CMAKE_MATCH_COUNT GREATER 0)
                    set(_os "${CMAKE_MATCH_1}")
                endif ()
            endif ()
        endif ()
    endif ()

    # 2) 编译器名字规范化--基于CXX
    set(_cc_id "${CMAKE_CXX_COMPILER_ID}")
    set(_cc_ver "${CMAKE_CXX_COMPILER_VERSION}")
    if (_cc_id STREQUAL "GNU")
        set(_cc_name "GCC")
    elseif (_cc_id STREQUAL "AppleClang")
        set(_cc_name "AppleClang")
    elseif (_cc_id STREQUAL "Clang")
        set(_cc_name "Clang")
    elseif (_cc_id STREQUAL "MSVC")
        set(_cc_name "MSVC")
        set(_cc_ver "${MSVC_VERSION}")
    elseif (_cc_id STREQUAL "IntelLLVM")
        set(_cc_name "Intel_LLVM")
    else ()
        set(_cc_name "${_cc_id}")
    endif ()

    # 3) 处理体系结构
    set(_arch "UNKNOWN")
    string(TOLOWER "${CMAKE_SYSTEM_PROCESSOR}" _proc)
    if (_proc MATCHES "^(x86|i[3-6]86|i.86)$")
        set(_arch "x86")
    elseif (_proc MATCHES "^(x86_64|amd64)$")
        set(_arch "x64")
    elseif (_proc MATCHES "^(arm64|aarch64)$")
        set(_arch "ARM64")
    elseif (_proc MATCHES "^(armv7|armv7l|armv6|armv6l|arm)$")
        set(_arch "ARM32")
    elseif (_proc MATCHES "^(riscv64)$")
        set(_arch "RISCV64")
    endif ()
    if (_arch STREQUAL "UNKNOWN")
        if (CMAKE_SIZEOF_VOID_P EQUAL 8)
            set(_arch "x64")
        elseif (CMAKE_SIZEOF_VOID_P EQUAL 4)
            set(_arch "x86")
        endif ()
    endif ()

    # 4) 平台/环境标签--独立于编译器
    set(_platform_tag "")
    if (MINGW)
        if (DEFINED ENV{MSYSTEM} AND NOT "$ENV{MSYSTEM}" STREQUAL "")
            set(_platform_tag "$ENV{MSYSTEM}")
        else ()
            set(_platform_tag "MINGW")
        endif ()
    elseif (CYGWIN)
        if (MSYS)
            set(_platform_tag "MSYS")
        elseif (DEFINED ENV{MSYSTEM} AND NOT "$ENV{MSYSTEM}" STREQUAL "")
            set(_platform_tag "$ENV{MSYSTEM}")
        else ()
            set(_platform_tag "CYGWIN")
        endif ()
    elseif (MSYS)
        if (DEFINED ENV{MSYSTEM} AND NOT "$ENV{MSYSTEM}" STREQUAL "")
            set(_platform_tag "$ENV{MSYSTEM}")
        else ()
            set(_platform_tag "MSYS")
        endif ()
    endif ()

    # 5) 组合后缀--按平台/工具链分支
    if (_platform_tag)
        set(_suffix "${_os}_${_cc_name}_v${_cc_ver}_${_platform_tag}_${_arch}")
    else ()
        set(_suffix "${_os}_${_cc_name}_v${_cc_ver}_${_arch}")
    endif ()
    set(${OUT_VAR} "${_suffix}" PARENT_SCOPE)
endfunction()

function(generate_version_rc OUT_VAR)
    set(_TEMPLATE "${CMAKE_SOURCE_DIR}/cmake/version.rc.in")
    if (NOT EXISTS "${_TEMPLATE}")
        message(FATAL_ERROR "version.rc.in not found at: ${_TEMPLATE}")
    endif ()
    set(PROJECT_FILE_VERSION_RC "${PROJECT_VERSION_MAJOR},${PROJECT_VERSION_MINOR},${PROJECT_VERSION_PATCH},0")
    set(PROJECT_FILE_VERSION_STR "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}.0")
    if (IS_MULTI_CONFIG)
        set(PROJECT_INTERNAL_NAME
                "$<$<CONFIG:Debug>:${PROJECT_NAME}d>$<$<NOT:$<CONFIG:Debug>>:${PROJECT_NAME}>")
        set(PROJECT_ORIGINAL_FILE_NAME
                "$<$<CONFIG:Debug>:${PROJECT_NAME}d.dll>$<$<NOT:$<CONFIG:Debug>>:${PROJECT_NAME}.dll>")
        set(PROJECT_FILE_DESCRIPTION
                "$<$<CONFIG:Debug>:${PROJECT_NAME_CHINESE}(Debug)>$<$<NOT:$<CONFIG:Debug>>:${PROJECT_NAME_CHINESE}>")
        configure_file(
                "${_TEMPLATE}"
                "${CMAKE_CURRENT_BINARY_DIR}/version_template.rc"
                @ONLY)
        file(GENERATE
                OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/version_$<CONFIG>.rc"
                INPUT "${CMAKE_CURRENT_BINARY_DIR}/version_template.rc")
        set(_RC_FILES "${CMAKE_CURRENT_BINARY_DIR}/version_$<CONFIG>.rc")
    else ()
        if (CMAKE_BUILD_TYPE STREQUAL "Debug")
            set(PROJECT_INTERNAL_NAME "${PROJECT_NAME}d")
            set(PROJECT_ORIGINAL_FILE_NAME "${PROJECT_NAME}d.dll")
            set(PROJECT_FILE_DESCRIPTION "${PROJECT_NAME_CHINESE}(Debug)")
        else ()
            set(PROJECT_INTERNAL_NAME "${PROJECT_NAME}")
            set(PROJECT_ORIGINAL_FILE_NAME "${PROJECT_NAME}.dll")
            set(PROJECT_FILE_DESCRIPTION "${PROJECT_NAME_CHINESE}")
        endif ()
        configure_file(
                "${_TEMPLATE}"
                "${CMAKE_CURRENT_BINARY_DIR}/version_${CMAKE_BUILD_TYPE}.rc"
                @ONLY)
        set(_RC_FILES "${CMAKE_CURRENT_BINARY_DIR}/version_${CMAKE_BUILD_TYPE}.rc")
    endif ()
    set(${OUT_VAR} "${_RC_FILES}" PARENT_SCOPE)
endfunction()
